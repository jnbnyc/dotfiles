#!/bin/bash


# shortcuts to exit & reload zsh preferences
  alias dotfiles='cd ~/GoogleDrive/workspace/home'
  alias bootstrap='source ~/.bootstrap'


  # edit() {
  #   # shortcuts to exit & reload zsh preferences
  #     if [[ "$1" == "bootstrap" ]]; then
  #       vim ~/.bootstrap && source ~/.bootstrap
  #     fi
  #     if [[ "$1" == "work" ]]; then
  #       vim ~/.work-aliases && source ~/.work-aliases
  #     fi
  #     if [[ "$1" == "alias" ]]; then
  #       vim ~/.aliases && source ~/.aliases
  #     fi
  #     if [[ "$1" == "zsh" ]]; then
  #       vim ~/.zshrc && source ~/.zshrc
  #     fi
  #     if [[ "$1" == "ssh" ]]; then
  #       vim ~/.ssh/config
  #     fi
  #     if [[ "$1" == "hosts" ]]; then
  #       sudo vim /etc/hosts
  #     fi
  #   # shortcuts to exit & reload bash preferences
  #     if [[ "$1" == "bashrc" ]]; then
  #       vim ~/.bash_profile && source ~/.bash_profile
  #     fi
  #     if [[ "$1" == "hosts" ]]; then
  #       vim ~/.bash_aliases && source ~/.bash_aliases
  #     fi
  # }

  edit() {
    case "$1" in
    # shortcuts to exit & reload zsh preferences
      bootstrap)
        vim ~/.bootstrap && source ~/.bootstrap
      ;;
      work)
        vim ~/.work-aliases && source ~/.work-aliases
      ;;
      alias)
        vim ~/.aliases && source ~/.aliases
      ;;
      zsh)
        vim ~/.zshrc && source ~/.zshrc
      ;;
      ssh)
        vim ~/.ssh/config
      ;;
      hosts)
        sudo vim /etc/hosts
      ;;
    # shortcuts to exit & reload bash preferences
      bashrc)
        vim ~/.bash_profile && if [[ $SHELL == "/bin/bash" ]]; then source ~/.bash_profile; fi
      ;;
      basha)
        vim ~/.bash_aliases && if [[ $SHELL == "/bin/bash" ]]; then source ~/.bash_aliases; fi
      ;;
      *)
        if [[ -f $1 ]]; then vim $1; else printf "Don't know about that: $1"; fi
    esac
  }

# if [ "$SHELL" = "/bin/bash" ]; then
#     alias bashrc="vim ~/.bash_profile && source ~/.bash_profile"
#     alias basha="vim ~/.bash_aliases && source ~/.bash_aliases"
# fi

# handy shortcuts
  ## Colorize the ls output ##
  alias la='ls -altr'
  alias ll='ls -la'  ## Use a long listing format ##
  alias l.='ls -d .*' ## Show hidden files ##
  alias h='history'
  alias c='clear'
  alias rmd='rm -rf'
  alias cpd='cp -rf'
  alias mkdir='mkdir -pv'
  alias ping='ping -c 5'  ## Stop after sending count ECHO_REQUEST packets ##
  alias fastping='ping -c 100 -s.2'  ## Do not wait interval 1 second, go fast ##

# Higher verbosity
  alias mv='mv -i'
  alias cp='cp -i'
  alias ln='ln -i'
  alias cwhich='command which'
  alias vurl='curl -ILv'

## Colorize the grep command output for ease of use (good for log files) ##
# alias grep='grep --color=auto'
# alias egrep='egrep --color=auto'
# alias fgrep='fgrep --color=auto'

# folder navigation
  alias ..='cd ..'
  alias ..2='cd ../../'
  alias ..3='cd ../../../'
  alias ..4='cd ../../../../'
  alias ..5='cd ../../../../../'
  alias ..6='cd ../../../../../../'
  alias ..7='cd ../../../../../../../'
  cd() { builtin cd "$@" && ls; }
 
# shortcuts to directories
  cellar()   {  cd /usr/local/Cellar/$1  }
  caskroom() {  cd /opt/homebrew-cask/Caskroom/$1  }
  ws()       {  cd ~/workspace/$1  }
  scmg() { cd ~/workspace/git/$1 }
  scms() { cd ~/workspace/svn/$1 }
  jnbnyc() { cd ~/workspace/git/github/jnbnyc/$1 }
  gdrive()   {  cd ~/GoogleDrive/$1  }


# shortcuts + functions for docker
  alias dm='docker-machine'
  alias doc='docker-compose'
  alias doover='docker-compose rm -f; docker-compose build && docker cache clean; docker-compose up'


  docker()
  {
    if [[ "$1" == "clean" ]]; then
    # functions for docker cleanup
      if [[ "$2" == "all" ]]; then
        docker kill $(docker ps -a -q)  # kill all
        docker rm $(docker ps -a -q)  ## rm all
      else  # remove images matching the grep
        docker images | grep $2 | awk '{print $3}' | xargs docker rmi
      fi
      echo Deleting dangling images
      docker rmi $(docker images -q --no-trunc --filter "dangling=true") || true

      echo Deleting dangling volumes
      docker volume rm $(docker volume ls -q --filter "dangling=true") || true
    else
      if [[ "$1" != "exec" ]]; then
        echo $@ | xargs docker  # throws error: "cannot enable tty mode on non tty input" for docker exec
      else
        printf "Use dxc alias: $(which dxc)"
      fi
    fi
  }

  dxc() { command docker exec -it $1 bash }
  dbounce() { docker-compose rm -f && docker-compose up }


#  functions that edit etc/hosts !!
  hosts()
  {
    if [[ "$1" == "docker" ]]; then
      sudo sed -i -r "s/^([0-9]+\.){3}[0-9]+\s\w+\s{2}#\sdocker/$(echo $DOCKER_HOST|grep -oP "(\d+\.){3}\d+") $DOCKER_MACHINE_NAME  # docker/g" /etc/hosts
    fi
  }

# shortcuts + functions for git
  alias gs='git status'
  alias gb='git branch'
  alias gba='git branch -a'
  alias gaa='git add --all && git status'
  alias gcm='git commit -m'
  alias gcam='git commit -am'
  alias glog='git log --oneline --all --graph --decorate'

  github() { cd ~/GoogleDrive/workspace/github }
  github-clone()  { git clone git@github-jnbnyc:jnbnyc/$1.git }  #  ssh config specifies which key to use
  github-create() { curl -X POST -u jnbnyc -d "{\"name\": \"$1\" }" https://api.github.com/user/repos }

# setup commit author
  gitcfg()
  {
    if [[ "$1" == "jnbnyc" ]]; then
      git config --local user.name jnbnyc
      git config --local user.email jnbuhaynyc@gmail.com
    else
      git config --local user.name "John Buhay"
      git config --local user.email john.buhay@weightwatchers.com
    fi
    # git config --local -l
  }

# shortcuts for git-flow
  alias gff='git flow feature'
  alias gfr='git flow release'
  alias gfh='git flow hotfix'
  alias gffs='git flow feature start'
  alias gfff='git flow feature finish'
  alias gfrs='git flow release start'
  alias gfrf='git flow release finish'


# shortcuts + functions for vagrant
  alias v='vagrant'
  alias up='vagrant up'
  alias vs='vagrant status'
  alias down='vagrant destroy --force' # Don't ask for confirmation before destroying
  alias vp='vagrant provision'
  alias in='vagrant up && vagrant ssh'
  bounce() { vagrant destroy $1 --force; vagrant up $1; }


# shortcuts for applications
  alias cask='brew cask'
  alias vi='vim -N'
  alias svi='sudo vim'


# mach displays the basic information about the system
  mach()
  {
      echo -e "\nMachine information:" ; uname -a
      echo -e "\nUsers logged on:" ; w -h
      echo -e "\nCurrent date :" ; date
      echo -e "\nMachine status :" ; uptime
      #echo -e "\nMemory status :" ; free
      echo -e "\nFilesystem status :"; df -h
  }


# generate a random password with a specified length, defaults to 8
  rpass()  {  tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${1:=8} | xargs  }


# functions for akamai
  iscached() { curl -I -H 'Pragma: akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key' $1 }


# functions for jira-cli
 alias jira='jira-cli'
 j() { jira-cli $@ }
 jcomment()     { jira-cli update $1 --comment }
 jnewtask()     { jira-cli new --project $1 --type task --description "$3" --assignee ${4:=john.buhay} "$2" }
 jnewbug()      { jira-cli new --project $1 --type bug  --description "$3" --assignee ${4:=john.buhay} "$2" }
 jassign()      { jira-cli update $1 --assign $2 }
 jview()        { jira-cli view $@ }
 jopen()        { open $JIRA_URL/browse/$1 }
 jt()           { jira-cli update $1 --transition $2 }
 jtstart()      { jt $1 'start progress' }
 jtstop()       { jt $1 'stop progress' }
 jtresolve()    { jt $1 'resolve' || jt $1 'Resolve Issue' }
 jtclose()      { jt $1 'close' || jt $1 'close issue' }
 jfilter()      { jira-cli view --filter $1 }
 joneline()     { jira-cli view --filter $1 --oneline }
 jfindt()       { jira-cli list transitions --issue=$1 }


printf 'Loaded aliases. '
