#!/usr/bin/env bash
# requires bootstrap!


alias dotfiles='cd $GDRIVE/dotfiles'
alias bootstrap='source $HOME/.bootstrap'
alias wework='source $HOME/.wework-bootstrap'


# handy shortcuts
#   ## Colorize the ls output ##
  alias la='ls -altrh'
  alias ll='ls -alFh'  ## Use a long listing format ##
  alias l.='ls -d .*' ## Show hidden files ##
#   alias h='history'
#   alias c='clear'
#   # alias rmd='rm -rf'
#   alias cpd='cp -rf'
  alias mkdir='mkdir -pv'
  alias ping='ping -c 5'  ## Stop after sending count ECHO_REQUEST packets ##
  alias fastping='ping -c 100 -s.2'  ## Do not wait interval 1 second, go fast ##

# # Higher verbosity
#   alias mv='mv -i'
#   alias cp='cp -i'
#   alias ln='ln -i'
#   alias cwhich='command which'


# ## Colorize the grep command output for ease of use (good for log files) ##
# # alias grep='grep --color=auto'
# # alias egrep='egrep --color=auto'
# # alias fgrep='fgrep --color=auto'

# folder navigation
  alias ..='cd ..'
  alias ..2='cd ../../'
  alias ..3='cd ../../../'
  alias ..4='cd ../../../../'
  alias ..5='cd ../../../../../'
  alias ..6='cd ../../../../../../'
  alias ..7='cd ../../../../../../../'
  cd() { builtin cd "$@" && ls; }


# shortcuts to directories
  cellar() { cd /usr/local/Cellar/$1; }  # brew
  caskroom() { cd /opt/homebrew-cask/Caskroom/$1; }  # brew cask
  ws()       { cd $WORKSPACE/$1; }
  scmg()     { cd $WORKSPACE/git/$1; }
  scms()     { cd $WORKSPACE/svn/$1; }
  jnbnyc()   { cd $WORKSPACE/jnbnyc-github/$1; }
  gdrive()   { cd $GDRIVE/$1; }

  
# docker shortcuts + functions
  alias dom='docker-machine'
  alias doc='docker-compose'
#   alias rebuild='docker-compose rm -f; docker-compose build && docker cache clean; docker-compose up'

#   docredo() { docker clean all; docker-compose up -d }

  # docker()
  # {
  #   if [[ "$1" == "clean" ]]; then
  #   # functions for docker cleanup
  #     if [[ "$2" == "all" ]]; then
  #       docker kill $(docker ps -a -q)  # kill all
  #       docker rm $(docker ps -a -q)  ## rm all
  #     else  # remove images matching the grep
  #       docker images | grep $2 | awk '{print $3}' | xargs docker rmi
  #     fi
  #     echo Deleting dangling images
  #     docker rmi $(docker images -q --no-trunc --filter "dangling=true") || true

  #     echo Deleting dangling volumes
  #     docker volume rm $(docker volume ls -q --filter "dangling=true") || true
  #   else
  #     if [[ "$1" != "exec" ]] && [[ "$2" != "-it" ]]; then
  #       echo $@ | xargs docker  # throws error: "cannot enable tty mode on non tty input" for docker exec
  #     else
  #       printf "Use dxc alias: $(which dxc)"
  #     fi
  #   fi
  # }

#   dxc() { 
#       if [[ -z "$1" ]]; then
#           command docker exec -it $(docker ps -l -q) bash ||  \
#           command docker exec -it $(docker ps -l -q) sh
#       else
#           command docker exec -it $(docker ps | grep $1 | awk '{print $1}') bash || sh
#           #command docker exec -it $1 bash
#       fi
#   }
#   drun() {
#       command docker run -it $@
#   }
#   dbounce() { docker-compose rm -f && docker-compose up }


#  functions that edit etc/hosts !!
  hosts() {
    if [[ "$1" == "docker" ]]; then
      sudo sed -r "s/^([0-9]+\.){3}[0-9]+\s\w+\s{2}#\s$DOCKER_MACHINE_NAME/$(echo $DOCKER_HOST|grep -oP "(\d+\.){3}\d+") $DOCKER_MACHINE_NAME  # docker/g" /etc/hosts
    fi
  }


# # shortcuts + functions for vagrant
#   alias v='vagrant'
#   alias up='vagrant up'
#   alias vs='vagrant status'
#   alias down='vagrant destroy --force' # Don't ask for confirmation before destroying
#   alias vp='vagrant provision'
#   alias in='vagrant up && vagrant ssh'
#   bounce() { vagrant destroy $1 --force; vagrant up $1; }


# shortcuts for applications
  alias cask='brew cask'
  alias vi='vim -N'
  alias svi='sudo vim'


# # mach displays the basic information about the system
#   mach()
#   {
#       echo -e "\nMachine information:" ; uname -a
#       echo -e "\nUsers logged on:" ; w -h
#       echo -e "\nCurrent date :" ; date
#       echo -e "\nMachine status :" ; uptime
#       #echo -e "\nMemory status :" ; free
#       echo -e "\nFilesystem status :"; df -h
#   }


# # generate a random password with a specified length, defaults to 8
#   rpass()  {  tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${1:=8} | xargs  }


# functions for akamai
  iscached() { curl -I -H 'Pragma: akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key' $1; }

toggle() {
  case "$1" in
    gnutools)
      PATH=/usr/local/opt/coreutils/bin:$PATH
    ;;
    *)
      echo 'I dont know that one.'
    ;;
  esac
}

edit() {
  # shortcuts to exit & reload zsh preferences
  case "$1" in
    bootstrap)
      vim $HOME/.bootstrap && source $HOME/.bootstrap
    ;;
    wework)
      vim $HOME/.wework-bootstrap && source $HOME/.wework-bootstrap
    ;;
    jira)
      vim $DOTFILES_DIR/jira && source $DOTFILES_DIR/jira
    ;;
    git)
      vim $DOTFILES_DIR/git && source $DOTFILES_DIR/git
    ;;
    alias)
      vim $HOME/.aliases && source $HOME/.aliases
    ;;
    zsh)
      vim $HOME/.zshrc && source $HOME/.zshrc
    ;;
    ssh)
      vim $HOME/.ssh/config
    ;;
    hosts)
      sudo vim /etc/hosts
    ;;
  # shortcuts to exit & reload bash preferences
    bashrc)
      vim ~/.bashrc && if [[ $SHELL == "/bin/bash" ]]; then source ~/.bashrc; fi
    ;;
    basha)
      vim ~/.bash_aliases && if [[ $SHELL == "/bin/bash" ]]; then source ~/.bash_aliases; fi
    ;;
    *)
      if [[ -f $1 ]]; then vim $1; else printf "Don't know about that: $1"; fi
  esac
}


#   # functions for curl
#   # time-curl () {
#   #     curl -w "\n
#   #                 # time_namelookup:  %{time_namelookup}\n
#   #                 # time_connect:  %{time_connect}\n
#   #                 # time_appconnect:  %{time_appconnect}\n
#   #                 # time_pretransfer:  %{time_pretransfer}\n
#   #                 # time_redirect:  %{time_redirect}\n
#   #                 # time_starttransfer:  %{time_starttransfer}\n
#   #                 ----------\n
#   #                 # time_total:  %{time_total}\n
#   #             \n" -s -v $@
#   # }

# source extras
  [ -f "$DOTFILES_DIR/jira" ] && source $DOTFILES_DIR/jira  # aliases and functions for jira-cli
  [ -f "$DOTFILES_DIR/git" ] && source $DOTFILES_DIR/git  # aliases and functions for git and github


echo 'Loaded aliases.'
